version: "3.7"

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: 10m
    max-file: "10"

services:
  nginx:
    image: nginxproxy/nginx-proxy:alpine
    restart: always
    pull_policy: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: ""
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # Bind the SSL certificate path from the host system to the
      # directory the nginx container uses for all certs.
      - /etc/ssl/certs:/etc/nginx/certs:ro
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      # Include Zenysis static assets and serve them directly from nginx.
      - ${OUTPUT_PATH}/zenysis_static:/usr/share/nginx/html/zenysis_static:ro
      # Set a custom vhost default configuration that includes compression and caching.
      - ${NGINX_DEFAULT_VHOST_CONFIG}:/etc/nginx/vhost.d/default:ro
    logging: *default-logging

  nginx-letsencrypt-companion:
    image: nginxproxy/acme-companion:latest
    restart: always
    pull_policy: always
    environment:
      - DHPARAM_BITS=4096
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # These are the same volumes used by the nginx image.
      # This is on purpose since the letsencrypt companion container works
      # with the nginx container collaboratively to generate SSL certs.
      - /etc/ssl/certs:/etc/nginx/certs:rw
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx-acme:/etc/acme.sh
    logging: *default-logging

  web:
    image: ${DOCKER_NAMESPACE}/harmony-web:${DOCKER_TAG}
    restart: always
    pull_policy: always
    ports:
      - 5000:5000
    environment:
      - ZEN_ENV=${ZEN_WEB_ENV}
      - DONT_SYNC_SOURCEMAPS=true
      - DATABASE_URL=${POSTGRES_DB_URI}
      - HSTS=off
      - SSL_POLICY=Mozilla-Modern
      - VIRTUAL_HOST=${ZEN_WEB_HOST}
      - LETSENCRYPT_HOST=${ZEN_WEB_HOST}
      - LETSENCRYPT_EMAIL=${ZEN_WEB_EMAIL}
    volumes:
      - ${OUTPUT_PATH}:/data/output
      - ${OUTPUT_PATH}/logs:/logs
      - ${INSTANCE_CONFIG}:/zenysis/instance_config.json
      - ${GLOBAL_CONFIG}:/zenysis/global_config.py
      - ${UPLOADS_DIR}:/zenysis/uploads
    command: ["/zenysis/docker/entrypoint_web.sh"]
    logging: *default-logging

  worker:
    image: ${DOCKER_NAMESPACE}/harmony-web:${DOCKER_TAG}
    restart: always
    pull_policy: always
    ports:
      - 61234:61234
    environment:
      - ZEN_ENV=${ZEN_WEB_ENV}
      - ZEN_LOG_CFG=/zenysis/log/log.prod-stackdriver.cfg
      - BROKER_URL=redis://redis:6379/0
    volumes:
      - ${OUTPUT_PATH}/logs:/logs
      - ${INSTANCE_CONFIG}:/zenysis/instance_config.json
      - ${GLOBAL_CONFIG}:/zenysis/global_config.py
    command: [
      "celery",
      "-A",
      "web.background_worker.celery",
      "worker",
      "--beat",
      "--loglevel=INFO"
    ]
    logging: *default-logging

  web-renderer:
    image: zengineering/url-to-pdf-api:latest
    restart: always
    pull_policy: always
    ports:
      - 9000:9000
    environment:
      - ALLOW_HTTP=true
      - PORT=9000

  redis:
    image: redis:latest
    restart: always
    pull_policy: always
    ports:
      - 6379:6379

  hasura:
    image: hasura/graphql-engine:latest.cli-migrations-v2
    restart: always
    pull_policy: always
    ports:
      - 8080:8080
    environment:
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT=500
      - HASURA_GRAPHQL_DATABASE_URL=${GRAPHQL_DATABASE_URL}
    volumes:
      - ${OUTPUT_PATH}/logs:/logs

volumes:
  # Let's Encrypt container needs to configure the vhosts during
  # cert issuing.
  nginx_vhost:
  # This html directory is only used to write let's encrypt challenge
  # files during the cert issuing process.
  nginx_html:
  # The acme.sh diretory stores the generated certificate state
  # This prevents re-issuing of the certificate if the container is restarted/re-created
  # It should only issue if there is no certificate or it is close to expiry.
  # Read more here: https://github.com/nginx-proxy/acme-companion/issues/510
  nginx-acme:
