# This Dockerfile used for local development.
# Not to be confused with what we used in production.
# The development environment is very different from production w.r.t. tools
# installed etc.
# This Dockerfile installs dependencies for the web app and the pipeline.
FROM ubuntu:22.04 as downloader
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update \
    && apt-get clean \
    && apt-get -y install --no-install-recommends \
    ca-certificates \
    wget \
    unzip \
    bzip2 \
    # build-essential: is needed for building proj.
    build-essential \
    # cmake: is needed for building proj.
    cmake \
    # sqlite3: required for building proj.
    sqlite3 \
    # libsqlite3-dev: required for building proj.
    libsqlite3-dev \
    # libtiff-dev: is needed for building proj.
    libtiff-dev \
    # libcurl4-openssl-dev: is needed for building proj.
    libcurl4-openssl-dev \
    # python3: is needed for building proj.
    python3 \
    && update-ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Download minio client
RUN case $(uname -m) in \
    "x86_64")\
    wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc;\
    ;;\
    "aarch64")\
    wget https://dl.minio.io/client/mc/release/linux-arm64/mc -O /usr/local/bin/mc;\
    ;;\
    esac;

# Download flow
RUN case $(uname -m) in \
    "x86_64")\
    wget https://github.com/facebook/flow/releases/download/v0.200.0/flow-linux64-v0.200.0.zip -O /tmp/flow.zip;\
    ;;\
    "aarch64")\
    wget https://github.com/facebook/flow/releases/download/v0.200.0/flow-linux-arm64-v0.200.0.zip -O /tmp/flow.zip;\
    ;;\
    esac; \
    cd /tmp && unzip flow.zip && mv flow/flow /usr/local/bin/flow && rm -rf flow*;

# Download pypy
# RUN case $(uname -m) in \
#     "x86_64")\
#     wget https://downloads.python.org/pypy/pypy3.9-v7.3.11-linux64.tar.bz2 -O /tmp/pypy3.9-v7.3.11-linux64.tar.bz2;\
#     cd /tmp && tar -xf pypy3.9-v7.3.11-linux64.tar.bz2;\
#     mv /tmp/pypy3.9-v7.3.11-linux64 /opt/pypy3.9-v7.3.11;\
#     ;;\
#     "aarch64")\
#     wget https://downloads.python.org/pypy/pypy3.9-v7.3.11-aarch64.tar.bz2 -O /tmp/pypy3.9-v7.3.11-aarch64.tar.bz2;\
#     cd /tmp && tar -xf pypy3.9-v7.3.11-aarch64.tar.bz2;\
#     mv /tmp/pypy3.9-v7.3.11-aarch64 /opt/pypy3.9-v7.3.11;\
#     ;;\
#     esac; \
#     rm /tmp/pypy3.9*;

# Download and build proj. (Ubuntu 22.04 has an old version of proj, numpy needs a more recent version)
RUN wget https://download.osgeo.org/proj/proj-9.2.1.tar.gz -O /tmp/proj-9.2.1.tar.gz \
    && tar -xzf /tmp/proj-9.2.1.tar.gz -C /tmp/ \
    && rm /tmp/proj-9.2.1.tar.gz \
    && mkdir /tmp/proj-9.2.1/build \
    && cd /tmp/proj-9.2.1/build \
    && cmake .. \
    && cmake --build .

FROM ubuntu:22.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get -y install --no-install-recommends software-properties-common gpg gpg-agent \
    && add-apt-repository 'ppa:deadsnakes/ppa' \
    && apt-get update \
    && apt-get -y install --no-install-recommends \
    build-essential \
    git \
    cmake \
    curl \
    libtiff-dev \
    sqlite3 \
    wget \
    libsqlite3-dev \
    libcurl4-openssl-dev \
    gcc \
    libpq-dev \
    libnetcdf-dev \
    gfortran \
    libgeos-dev \
    libyaml-dev \
    libffi-dev \
    libbz2-dev \
    apt-transport-https \
    ca-certificates \
    postgresql-client \
    lz4 \
    libyaml-dev \
    # dtach: emulates the detach feature of screen, not sure where it's used.
    dtach \
    # jq: command-line JSON processor.
    jq \
    # libssel-dev: TODO: not sure if this is required.
    libssl-dev \
    # liblz4-tool: TODO: not sure if this is required in addition to lz4.
    liblz4-tool \
    # pigz: faster gzip implementation.
    pigz \
    # libopenblas-dev: TODO: not sure if this is required.
    libopenblas-dev \
    # liblapack-dev: TODO: not sure if this is required.
    liblapack-dev \
    # watchman warns not to use Ubuntu supplied version, but the current version
    # doesn't build on arm64, and they don't provide and arm64 .deb package.
    # watchman is used by translations to watch files.
    # pypy3: is needed for installing the pypy3 venv, used by the pipeline.
    pypy3 \
    # pypy3-dev: is needed for installing some dependencies.
    pypy3-dev \
    # pypy3-venv: is needed for installing venv
    pypy3-venv \
    # python3: is needed for installing the cpython venv, used by the pipeline.
    # python3-dev: is needed for installing some dependencies.
    python3.9-dev \
    # python3-pip: is needed for installing dependencies.
    python3-pip \
    # python3-venv: is needed for installing the cpython venv, used by the pipeline.
    python3.9-venv \
    watchman \
    vim \
    && update-ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Bring in the exact version of node we currently use:
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - \
    && apt-get install -y nodejs

# Install minio client
COPY --chmod=755 --from=downloader /usr/local/bin/mc /usr/local/bin/mc

WORKDIR /app

# Numpy needs: proj, but the version of proj ubuntu gives us is too old, so we
# compile a newer one.
# We grab the build from a previous step - it's just nice having a long running
# build cached.
COPY --from=downloader /tmp/proj-9.2.1 /tmp/proj-9.2.1
RUN cd /tmp/proj-9.2.1/build \    
    && cmake --build . --target install \
    && rm -rf /tmp/proj-9.2.1

# CPython
# Update setup and create venv
RUN python3.9 -m pip install --upgrade pip setuptools \
    && python3.9 -m venv venv \
    && . venv/bin/activate && python -m pip install --upgrade pip setuptools
# Install dependencies
COPY requirements.txt requirements-web.txt requirements-dev.txt requirements-pipeline.txt ./
RUN . venv/bin/activate \
    && python -m pip install -r requirements.txt \
    && python -m pip install -r requirements-web.txt \
    && python -m pip install -r requirements-dev.txt \
    && python -m pip install -r requirements-pipeline.txt

# PyPy
RUN pypy3 -m pip install --upgrade pip setuptools \
    && pypy3 -m venv venv_pypy3 \
    && . venv_pypy3/bin/activate \
    && pypy3 -m pip install --upgrade pip setuptools \
    && pypy3 -m pip install -r requirements.txt
# TODO: Currently skipping requirements-pipeline.txt due to pyproj not installing correctly
# on arm processors with pypy. This will be resolved in the future when the python verions and
# dependencies are updated.
#     && pypy3 -m pip install -r requirements-pipeline.txt

# Install flow.
COPY --from=downloader /usr/local/bin/flow /usr/local/bin/flow

RUN npm install -g yarn

COPY package.json yarn.lock ./
RUN yarn install

EXPOSE 5000

CMD [ "./docker/dev/scripts/start_web.sh" ]