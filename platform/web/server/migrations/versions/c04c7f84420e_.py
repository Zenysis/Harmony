'''Adding support for RBAC

Revision ID: c04c7f84420e
Revises: 3b18f32329fa
Create Date: 2017-09-12 14:59:44.728211

'''
from alembic import op
import sqlalchemy as sa

from web.server.migrations.seed_scripts.seed_c04c7f84420e import upvert_data


# revision identifiers, used by Alembic.
revision = 'c04c7f84420e'
down_revision = '3b18f32329fa'
branch_labels = None
depends_on = None


def upgrade():
    op.create_table(
        'resource_type',
        sa.Column('id', sa.INTEGER, primary_key=True),
        sa.Column('name', sa.String(100), nullable=False),
    )

    op.create_table(
        'resource',
        sa.Column('id', sa.INTEGER, primary_key=True),
        sa.Column(
            'resource_type_id',
            sa.INTEGER,
            sa.ForeignKey('resource_type.id', name='valid_resource_type'),
            nullable=False,
        ),
        sa.Column('name', sa.String(1000), nullable=False),
        sa.Column('label', sa.String(1000), nullable=False),
    )

    op.create_table(
        'permission_definition',
        sa.Column('id', sa.INTEGER, primary_key=True),
        sa.Column(
            'resource_type_id',
            sa.INTEGER,
            sa.ForeignKey('resource_type.id', name='valid_resource_type'),
            nullable=False,
        ),
        sa.Column('permission', sa.String(100), nullable=False),
    )

    op.create_table(
        'permission',
        sa.Column('id', sa.INTEGER, primary_key=True),
        sa.Column(
            'role_id',
            sa.INTEGER,
            sa.ForeignKey('role.id', ondelete='CASCADE', name='valid_role'),
            nullable=False,
        ),
        sa.Column(
            'definition_id',
            sa.INTEGER,
            sa.ForeignKey(
                'permission_definition.id',
                ondelete='CASCADE',
                name='valid_permission_definition',
            ),
            nullable=False,
        ),
    )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('resource_type_id', sa.INTEGER, nullable=True))
        batch_op.create_foreign_key(
            'valid_resource_type',
            'resource_type',
            ['resource_type_id'],
            ['id'],
            ondelete='CASCADE',
        )

    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('resource_id', sa.INTEGER, nullable=True))
        batch_op.alter_column('role_id', existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column('user_id', existing_type=sa.INTEGER(), nullable=False)
        batch_op.create_foreign_key(
            'valid_resource', 'resource', ['resource_id'], ['id'], ondelete='CASCADE'
        )
    # ### end Alembic commands ###
    upvert_data(op)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.drop_constraint('valid_resource', type_='foreignkey')
        batch_op.alter_column('user_id', existing_type=sa.INTEGER(), nullable=True)
        batch_op.alter_column('role_id', existing_type=sa.INTEGER(), nullable=True)
        batch_op.drop_column('resource_id')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_constraint('valid_resource_type', type_='foreignkey')
        batch_op.drop_column('resource_type_id')
    # ### end Alembic commands ###

    op.drop_table('permission')
    op.drop_table('permission_definition')
    op.drop_table('resource')
    op.drop_table('resource_type')
