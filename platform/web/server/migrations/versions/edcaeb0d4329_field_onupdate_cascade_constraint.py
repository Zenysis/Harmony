# pylint: disable=invalid-name
"""empty message

Revision ID: edcaeb0d4329
Revises: eb1742dac26e
Create Date: 2022-12-05 10:51:22.039171

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.engine import ResultProxy
from sqlalchemy.exc import ProgrammingError

# revision identifiers, used by Alembic.
revision = 'edcaeb0d4329'
down_revision = 'eb1742dac26e'
branch_labels = None
depends_on = None


def upgrade():

    # We want to rename the `field_copied_from_field_id_fkey` constraint to `copied_from_field` because not all dbs
    # are consistent with the naming of that constraint
    session = sa.orm.Session(bind=op.get_bind())
    with session.begin(subtransactions=True):
        # We shall first find if the constraint we want to rename exists and only rename if it does.
        result = session.execute(
            text(
                """SELECT con.*
                    FROM pg_catalog.pg_constraint con
                    INNER JOIN pg_catalog.pg_class rel
                   ON rel.oid = con.conrelid
                   AND con.conname = 'field_copied_from_field_id_fkey'
                    INNER JOIN pg_catalog.pg_namespace nsp
                   ON nsp.oid = connamespace
                    WHERE nsp.nspname = 'public'
                    AND rel.relname = 'field';"""
            )
        )
        if result.fetchone() is not None:
            session.execute(
                text(
                    "ALTER TABLE field RENAME CONSTRAINT field_copied_from_field_id_fkey TO copied_from_field;"
                )
            )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('field', schema=None) as batch_op:
        batch_op.drop_constraint('copied_from_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'copied_from_field',
            'field',
            ['copied_from_field_id'],
            ['id'],
            onupdate='CASCADE',
            ondelete='CASCADE',
        )

    with op.batch_alter_table('field_category_mapping', schema=None) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field',
            'field',
            ['field_id'],
            ['id'],
            onupdate='CASCADE',
            ondelete='CASCADE',
        )

    with op.batch_alter_table('field_dimension_mapping', schema=None) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field',
            'field',
            ['field_id'],
            ['id'],
            onupdate='CASCADE',
            ondelete='CASCADE',
        )

    with op.batch_alter_table(
        'field_pipeline_datasource_mapping', schema=None
    ) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field',
            'field',
            ['field_id'],
            ['id'],
            onupdate='CASCADE',
            ondelete='CASCADE',
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        'field_pipeline_datasource_mapping', schema=None
    ) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field', 'field', ['field_id'], ['id'], ondelete='CASCADE'
        )

    with op.batch_alter_table('field_dimension_mapping', schema=None) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field', 'field', ['field_id'], ['id'], ondelete='CASCADE'
        )

    with op.batch_alter_table('field_category_mapping', schema=None) as batch_op:
        batch_op.drop_constraint('valid_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'valid_field', 'field', ['field_id'], ['id'], ondelete='CASCADE'
        )

    with op.batch_alter_table('field', schema=None) as batch_op:
        batch_op.drop_constraint('copied_from_field', type_='foreignkey')
        batch_op.create_foreign_key(
            'copied_from_field',
            'field',
            ['copied_from_field_id'],
            ['id'],
            ondelete='CASCADE',
        )

    # ### end Alembic commands ###
