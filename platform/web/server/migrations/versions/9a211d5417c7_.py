"""Add Tables for Location Matching

Revision ID: 9a211d5417c7
Revises: d0252bd4b32e
Create Date: 2019-01-17 14:35:07.588900

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9a211d5417c7'
down_revision = 'd0252bd4b32e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'location_types',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'sources',
        sa.Column('source_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('source_id'),
    )
    op.create_table(
        'canonical_locations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('parent_id', sa.Integer(), nullable=True),
        sa.Column('type_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['parent_id'],
            ['canonical_locations.id'],
        ),
        sa.ForeignKeyConstraint(
            ['type_id'],
            ['location_types.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'unmatched_locations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('parent_id', sa.Integer(), nullable=True),
        sa.Column('type_id', sa.Integer(), nullable=True),
        sa.Column('source_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['parent_id'],
            ['canonical_locations.id'],
        ),
        sa.ForeignKeyConstraint(
            ['source_id'],
            ['sources.source_id'],
        ),
        sa.ForeignKeyConstraint(
            ['type_id'],
            ['location_types.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'suggested_matches',
        sa.Column('canonical_id', sa.Integer(), nullable=False),
        sa.Column('unmatched_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['canonical_id'],
            ['canonical_locations.id'],
        ),
        sa.ForeignKeyConstraint(
            ['unmatched_id'],
            ['unmatched_locations.id'],
        ),
        sa.PrimaryKeyConstraint('canonical_id', 'unmatched_id'),
    )
    op.create_table(
        'user_matches',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('canonical_id', sa.Integer(), nullable=False),
        sa.Column('unmatched_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['canonical_id'],
            ['canonical_locations.id'],
        ),
        sa.ForeignKeyConstraint(
            ['unmatched_id'],
            ['unmatched_locations.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['user.id'], name='valid_user', ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('user_id', 'canonical_id', 'unmatched_id'),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_matches')
    op.drop_table('suggested_matches')
    op.drop_table('unmatched_locations')
    op.drop_table('canonical_locations')
    op.drop_table('sources')
    op.drop_table('location_types')
    # ### end Alembic commands ###
